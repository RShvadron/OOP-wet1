package homework1;

import java.awt.*;

/**
 * A AngleChangingSector is an abstraction of a Oval changing sector object. AngleChangingSector will change his animation 
 * every time there will be a change in the sector.
 * A typical Shape consists of a set of properties: {location, color, shape, size}.
 */
public class AngleChangingSector extends Shape implements Animatable{
	
	
	// Abstraction Function:
    //   represents a shape with location = (x,y) (point on Two-dimensional space) at this.location   
    //   and a color at this.color

    // Representation Invariant:
    //   location != NULL, color != NULL 
    
    
    /**
     * Checks to see if the representation invariant is being violated.
     * @throws AssertionError if representation invariant is violated.
     */ 
	private void checkRep() {
		
	}
	
	

	/**
     * @modifies this
     * @effects Resizes this so that its bounding rectangle has the specified
     *          dimension.
     *          If this cannot be resized to the specified dimension =>
     *          this is not modified, throws ImpossibleSizeException
     *          (the exception suggests an alternative dimension that is
     *           supported by this).
     */
	public void setSize(Dimension dimension) throws ImpossibleSizeException {
		checkRep();
		if (dimension.getHeight() < 0 || dimension.getWidth() < 0 )
		{
			checkRep();
			throw new ImpossibleSizeException 
			(new Dimension(Math.abs((int)dimension.getWidth()), Math.abs((int)dimension.getHeight())));
		}
		dim.height = (int)dimension.getHeight();
		dim.width = (int)dimension.getWidth();
		checkRep();
		return;
		
	}
	
	
	/**
     * @return the bounding rectangle of this.
     */
	public Rectangle getBounds() {
		checkRep();
		Rectangle rect = new Rectangle(getLocation().x, getLocation().y, (int)dim.getWidth(), (int)dim.getHeight());
		checkRep();
		return rect;
	}

	
	/**
     * @modifies g
     * @effects Draws this onto g.
     */
	public void draw(Graphics g) {
		checkRep();
		g.setColor(getColor());
		g.fillArc((int) getLocation().getX(),(int) getLocation().getY(), 
				(int) dim.getWidth(), (int) dim.getHeight(), startAngle, arcAngle);
		checkRep();
	}
	
	
	/**
     * @effects Creates and returns a copy of this.
     */
	@Override
	public Object clone() {
		checkRep();
		AngleChangingSector clone = (AngleChangingSector) super.clone();
		if (clone == null)
    		return null;
		clone.dim=(Dimension)dim.clone();
		clone.startAngle = startAngle;
		clone.arcAngle = arcAngle;
    	checkRep();
    	return clone;
    }	

}
