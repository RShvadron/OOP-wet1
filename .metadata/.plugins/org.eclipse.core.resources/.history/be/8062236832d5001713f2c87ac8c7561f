package homework1;

import java.awt.*;


/**
 * A Shape is an abstraction of a shape object. A typical Shape consists of
 * a set of properties: {location, color, shape, size}.
 * Shapes are mutable and cloneable.
 */
public abstract class Shape implements Cloneable {

    private Point location;
    private Color color;


    // Abstraction Function:
    //   represents a shape with location at this.location  
    //   and a color at this.color

    // Representation Invariant:
    //   location != NULL, color != NULL 
    //   location.width && location.height > 0 
    /**
     * @effects Initializes this with a given location and color.
     */
    public Shape(Point location, Color color) {
    	this.location = (Point)location.clone();
    	this.color = color;
    	checkRep();
    }


    /**
     * @return the top left corner of the bounding rectangle of this.
     */
    public Point getLocation() {
    	checkRep();
        Point copyOfLocation = (Point)this.location.clone();
        return copyOfLocation;
    }


    /**
     * @modifies this
     * @effects Moves this to the given location, i.e. this.getLocation()
     *          returns location after call has completed.
     */
    public void setLocation(Point location) {
    	checkRep();
        this.location = (Point)location.clone();
        checkRep();
    }


    /**
     * @modifies this
     * @effects Resizes this so that its bounding rectangle has the specified
     *          dimension.
     *          If this cannot be resized to the specified dimension =>
     *          this is not modified, throws ImpossibleSizeException
     *          (the exception suggests an alternative dimension that is
     *           supported by this).
     */
    public abstract void setSize(Dimension dimension)
        throws ImpossibleSizeException;


    /**
     * @return the bounding rectangle of this.
     */
    public abstract Rectangle getBounds();


    /**
     * @return true if the given point lies inside the bounding rectangle of
     *         this and false otherwise.
     */
    public boolean contains(Point point) {
        return getBounds().contains(point);
    }


    /**
     * @return color of this.
     */
    public Color getColor() {
    	checkRep();
        return color;
    }


    /**
     * @modifies this
     * @effects Sets color of this.
     */
    public void setColor(Color color) {
    	checkRep();
        this.color = color;
        checkRep();
    }


    /**
     * @modifies g
     * @effects Draws this onto g.
     */
    public abstract void draw(Graphics g);


    /**
     * @effects Creates and returns a copy of this.
     */
    @Override
    public Object clone() {
    	checkRep();
    	try{
    		Shape copy_shape = (Shape)super.clone();
        	copy_shape.setColor(this.getColor());
        	copy_shape.location = (Point)location.clone();
        	copy_shape.checkRep();
        	return copy_shape;
    	}catch(CloneNotSupportedException ex){
    		return null;
    	}
    }
    /**
     * Checks to see if the representation invariant is being violated.
     * @throws AssertionError if representation invariant is violated.
     */ 
    private void checkRep() {
    	assert location != null && color !=null : "location or color or both is null";
    	assert location.x >= 0 && location.y >= 0 : "location.x or location.y or both < 0";
    }
}
